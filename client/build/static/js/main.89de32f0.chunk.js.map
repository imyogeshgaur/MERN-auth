{"version":3,"sources":["components/routing/PrivateRoute.js","components/screens/PrivateScreen.js","components/screens/LoginScreen.js","components/screens/RegisterScreen.js","components/screens/ForgotPasswordScreen.js","components/screens/ResetPasswordScreen.js","App.js","reportWebVitals.js","index.js"],"names":["PrivateRoute","Component","component","rest","render","props","localStorage","getItem","to","PrivateScreen","useState","error","setError","privateData","setPrivateData","useEffect","a","config","headers","Authorization","axios","get","data","removeItem","fetchPrivateDate","className","LoginScreen","history","email","setEmail","password","setPassword","push","loginHandler","e","preventDefault","header","post","setItem","token","response","setTimeout","onSubmit","htmlFor","type","required","id","placeholder","onChange","target","value","tabIndex","autoComplete","RegisterScreen","username","setUsername","confirmpassword","setConfirmPassword","registerHandler","ForgotPasswordScreen","success","setSuccess","forgotPasswordHandler","ResetPasswordScreen","match","confirmPassword","resetPasswordHandler","put","params","resetToken","console","log","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89de32f0.chunk.js","sourcesContent":["import { Redirect, Route } from \"react-router-dom\";\r\n\r\nconst PrivateRoute = ({ component: Component, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        localStorage.getItem(\"authToken\") ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to=\"/login\" />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./PrivateScreen.css\";\r\n\r\nconst PrivateScreen = () => {\r\n  const [error, setError] = useState(\"\");\r\n  const [privateData, setPrivateData] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchPrivateDate = async () => {\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${localStorage.getItem(\"authToken\")}`,\r\n        },\r\n      };\r\n\r\n      try {\r\n        const { data } = await axios.get(\"/api/private\", config);\r\n        setPrivateData(data.data);\r\n      } catch (error) {\r\n        localStorage.removeItem(\"authToken\");\r\n        setError(\"You are not authorized please login\");\r\n      }\r\n    };\r\n\r\n    fetchPrivateDate();\r\n  }, []);\r\n  return error ? (\r\n    <span className=\"error-message\">{error}</span>\r\n  ) : (\r\n    <div>{privateData}</div>\r\n  );\r\n};\r\n\r\nexport default PrivateScreen;\r\n","import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./LoginScreen.css\";\r\n\r\nconst LoginScreen = ({ history }) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"authToken\")) {\r\n      history.push(\"/\");\r\n    }\r\n  }, [history]);\r\n\r\n  const loginHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const config = {\r\n      header: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const { data } = await axios.post(\r\n        \"/api/auth/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      localStorage.setItem(\"authToken\", data.token);\r\n\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      setError(error.response.data.error);\r\n      setTimeout(() => {\r\n        setError(\"\");\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-screen\">\r\n      <form onSubmit={loginHandler} className=\"login-screen__form\">\r\n        <h3 className=\"login-screen__title\">Login</h3>\r\n        {error && <span className=\"error-message\">{error}</span>}\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            type=\"email\"\r\n            required\r\n            id=\"email\"\r\n            placeholder=\"Email address\"\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            value={email}\r\n            tabIndex={1}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"password\">\r\n            Password:{\" \"}\r\n            <Link to=\"/forgotpassword\" className=\"login-screen__forgotpassword\">\r\n              Forgot Password?\r\n            </Link>\r\n          </label>\r\n          <input\r\n            type=\"password\"\r\n            required\r\n            id=\"password\"\r\n            autoComplete=\"true\"\r\n            placeholder=\"Enter password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            value={password}\r\n            tabIndex={2}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Login\r\n        </button>\r\n\r\n        <span className=\"login-screen__subtext\">\r\n          Don't have an account? <Link to=\"/register\">Register</Link>\r\n        </span>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n","import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./RegisterScreen.css\";\r\n\r\nconst RegisterScreen = ({ history }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmpassword, setConfirmPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const registerHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const config = {\r\n      header: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    if (password !== confirmpassword) {\r\n      setPassword(\"\");\r\n      setConfirmPassword(\"\");\r\n      setTimeout(() => {\r\n        setError(\"\");\r\n      }, 5000);\r\n      return setError(\"Passwords do not match\");\r\n    }\r\n\r\n    try {\r\n      const { data } = await axios.post(\r\n        \"/api/auth/register\",\r\n        {\r\n          username,\r\n          email,\r\n          password,\r\n        },\r\n        config\r\n      );\r\n\r\n      localStorage.setItem(\"authToken\", data.token);\r\n\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      setError(error.response.data.error);\r\n      setTimeout(() => {\r\n        setError(\"\");\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"register-screen\">\r\n      <form onSubmit={registerHandler} className=\"register-screen__form\">\r\n        <h3 className=\"register-screen__title\">Register</h3>\r\n        {error && <span className=\"error-message\">{error}</span>}\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"name\">Username:</label>\r\n          <input\r\n            type=\"text\"\r\n            required\r\n            id=\"name\"\r\n            placeholder=\"Enter username\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            type=\"email\"\r\n            required\r\n            id=\"email\"\r\n            placeholder=\"Email address\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"password\">Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            required\r\n            id=\"password\"\r\n            autoComplete=\"true\"\r\n            placeholder=\"Enter password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"confirmpassword\">Confirm Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            required\r\n            id=\"confirmpassword\"\r\n            autoComplete=\"true\"\r\n            placeholder=\"Confirm password\"\r\n            value={confirmpassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Register\r\n        </button>\r\n\r\n        <span className=\"register-screen__subtext\">\r\n          Already have an account? <Link to=\"/login\">Login</Link>\r\n        </span>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterScreen;\r\n","import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./ForgotPasswordScreen.css\";\r\n\r\nconst ForgotPasswordScreen = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n\r\n  const forgotPasswordHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const config = {\r\n      header: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const { data } = await axios.post(\r\n        \"/api/auth/forgotpassword\",\r\n        { email },\r\n        config\r\n      );\r\n\r\n      setSuccess(data.data);\r\n    } catch (error) {\r\n      setError(error.response.data.error);\r\n      setEmail(\"\");\r\n      setTimeout(() => {\r\n        setError(\"\");\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"forgotpassword-screen\">\r\n      <form\r\n        onSubmit={forgotPasswordHandler}\r\n        className=\"forgotpassword-screen__form\"\r\n      >\r\n        <h3 className=\"forgotpassword-screen__title\">Forgot Password</h3>\r\n        {error && <span className=\"error-message\">{error}</span>}\r\n        {success && <span className=\"success-message\">{success}</span>}\r\n        <div className=\"form-group\">\r\n          <p className=\"forgotpassword-screen__subtext\">\r\n            Please enter the email address you register your account with. We\r\n            will send you reset password confirmation to this email\r\n          </p>\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            type=\"email\"\r\n            required\r\n            id=\"email\"\r\n            placeholder=\"Email address\"\r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Send Email\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgotPasswordScreen;\r\n","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./ResetPasswordScreen.css\";\r\n\r\nconst ResetPasswordScreen = ({ history, match }) => {\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n\r\n  const resetPasswordHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const config = {\r\n      header: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    if (password !== confirmPassword) {\r\n      setPassword(\"\");\r\n      setConfirmPassword(\"\");\r\n      setTimeout(() => {\r\n        setError(\"\");\r\n      }, 5000);\r\n      return setError(\"Passwords don't match\");\r\n    }\r\n\r\n    try {\r\n      const { data } = await axios.put(\r\n        `/api/auth/passwordreset/${match.params.resetToken}`,\r\n        {\r\n          password,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data);\r\n      setSuccess(data.data);\r\n    } catch (error) {\r\n      setError(error.response.data.error);\r\n      setTimeout(() => {\r\n        setError(\"\");\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"resetpassword-screen\">\r\n      <form\r\n        onSubmit={resetPasswordHandler}\r\n        className=\"resetpassword-screen__form\"\r\n      >\r\n        <h3 className=\"resetpassword-screen__title\">Forgot Password</h3>\r\n        {error && <span className=\"error-message\">{error} </span>}\r\n        {success && (\r\n          <span className=\"success-message\">\r\n            {success} <Link to=\"/login\">Login</Link>\r\n          </span>\r\n        )}\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"password\">New Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            required\r\n            id=\"password\"\r\n            placeholder=\"Enter new password\"\r\n            autoComplete=\"true\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"confirmpassword\">Confirm New Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            required\r\n            id=\"confirmpassword\"\r\n            placeholder=\"Confirm new password\"\r\n            autoComplete=\"true\"\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Reset Password\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPasswordScreen;\r\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\n// Routing\r\nimport PrivateRoute from \"./components/routing/PrivateRoute\";\r\n\r\n// Screens\r\nimport PrivateScreen from \"./components/screens/PrivateScreen\";\r\nimport LoginScreen from \"./components/screens/LoginScreen\";\r\nimport RegisterScreen from \"./components/screens/RegisterScreen\";\r\nimport ForgotPasswordScreen from \"./components/screens/ForgotPasswordScreen\";\r\nimport ResetPasswordScreen from \"./components/screens/ResetPasswordScreen\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <div className=\"app\">\r\n        <Switch>\r\n          <PrivateRoute exact path=\"/\" component={PrivateScreen} />\r\n          <Route exact path=\"/login\" component={LoginScreen} />\r\n          <Route exact path=\"/register\" component={RegisterScreen} />\r\n          <Route\r\n            exact\r\n            path=\"/forgotpassword\"\r\n            component={ForgotPasswordScreen}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/passwordreset/:resetToken\"\r\n            component={ResetPasswordScreen}\r\n          />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}